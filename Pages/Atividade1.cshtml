@page
@model Atividade1Model
@using aa_time_1.Pages
@{
    ViewData["Title"] = "Atividade 1";
}

<div class="text-center" id="containerPrincipal">
    <h1 class="display-4">Atividade 1</h1>
    <h3><strong>Análise de Complexidade</strong></h3>
        <div align='justify'>
        <p>Foi feito o consumo de uma 
            <a href="http://www.portaltransparencia.gov.br/api-de-dados" target="_blank" rel="nonfollow">API do Governo Federal do Brasil</a>, 
            com o objetivo de obter dados que são liberados para desenvolvedores, afim de fazer análises de complexidade, sendo elas para os algoritmos de: Buscas(Linear e Binária), Ordenação(Bolha) e Filtragem.
        </p>
        <p>Utilizando o <a href="https://www.chartjs.org/" target="_blank" rel="nonfollow">chart.js</a>, que é uma biblioteca do JavaScript, fizemos a plotagem dos gráficos, com o intuito de fazer comparações da eficiência de cada algoritmo.</p>
        </div>
    <section id="mainAnalise">

        <div id="wrapperCanvasTempo" class="chart-wrapper">
            <span id="tempo_binaria" hidden>@Model.TempoBinaria</span>
            <span id="tempo_bolha"   hidden>@Model.TempoBolha</span>
            <span id="tempo_filtro"  hidden>@Model.TempoFiltro</span>
            <span id="tempo_linear"  hidden>@Model.TempoLinear</span>
            <canvas id="chartTempo"></canvas>
        </div>

        <div id="wrapperCanvasInstrucoes" class="chart-wrapper">
            <span id="instrucoes_binaria" hidden>@Model.InstrucoesBinaria</span>
            <span id="instrucoes_bolha"   hidden>@Model.InstrucoesBolha</span>
            <span id="instrucoes_filtro"  hidden>@Model.InstrucoesFiltro</span>
            <span id="instrucoes_linear"  hidden>@Model.InstrucoesLinear</span>
            <canvas id="chartInstrucoes"></canvas>
        </div>
          <div align='justify'>Para cada algoritmo de busca adotou-se o pior caso para a análise de resultado.

<p>Analisando cada um dos gráficos obtidos pelos algoritmos, observa-se que a Busca Binária mostrou-se mais eficiente
pelo fato de usar menos instruções, o que torna o algoritmo mais rápido demandando menor esforço computacional.
Observa-se que o número de instruções mantem-se constante em determinado ponto do gráfico quando refere-se a esse tipo de pesquisa.</p>

<p>Em comparação com a Busca Linear(que percorre todo o vetor se o valor buscado estiver na última posição), a Busca Binária é mais eficiente
pois percorre o vetor de maneira otimizada utilizando a estratégia de divisão e conquista, repartindo o vetor em vetores menores, o que explica
sua rapidez e eficiência.</p>

<p>Observando o gráfico da ordenação por bolhas nota-se que a complexidade do algoritmo é de ordem quadrática, dessa forma, o mesmo não é recomendado para
programas que demandam velocidade e operam com grande quantidade de dados.
Esse algoritmo percorre o vetor várias vezes e compara os elementos de dois a dois, trocando-os de posição caso necessário.
O número de instruções cresce exponencialmente de acordo com o número de entradas.</p>

<p><strong>Equações:</strong><br>
	Linear = 2n + 1<br>
	Filtro = 2n + 2<br>
	Bolha = 6n² + 2<br>
	Binária = 5 + 6log2(n)</p><br></div>
    </section>
</div>
    </section>
</div>

<script src="~/js/funcoes.js"></script>
<script src="~/js/atividade1.js"></script>
